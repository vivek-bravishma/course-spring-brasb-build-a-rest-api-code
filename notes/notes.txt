REST-
	REST stands for Representational State Transfer. In a RESTful system, data objects are called Resource Representations. The purpose of a RESTful API(Application Programming Interface) is to manage the state of these Resources.
	Said another way, you can think of "state" being "value" and "Resource Representation" being an "object" or "thing". Therefore, REST is just a way to manage the values of things. Those things might be accessed via an API, and are often stored in a persistent data store, such as a database.

    A frequently mentioned concept when speaking about REST is CRUD. CRUD stands for "Create, Read, Update, and Delete". These are the four basic operations that can be performed on objects in a data store.

    Another common concept associated with REST is the HyperText Transfer Protocol. In HTTP, a caller sends a Request to a URI. A web server receives the request, and routes it to a request handler. The handler creates a Response, which is then sent back to the caller.

    The components of the Request and Response are:
        Request-
            Method (also called Verb)
            URI (also called Endpoint)
            Body
        Response-
            Status Code
            Body

For CREATE: use HTTP method POST.
For READ: use HTTP method GET.
For UPDATE: use HTTP method PUT or PATCH.
For DELETE: use HTTP method DELETE.



Operation   API Endpoint        HTTP Method     Response Status     Idempotence
Create      /cashcards	        POST	        201 (CREATED)       No
Read        /cashcards/{id}	    GET	            200 (OK)            Yes
Delete      /cashcards/{id}	    DELETE	        204 (NO CONTENT)    Yes
Update      /cashcards/{id}	    PUT	            204 (NO CONTENT)    Yes
Update      /cashcards/{id}	    PATCH	        204 (NO CONTENT)    No(actually depends)

GET	-	fetch resource.
POST	-	create resource.
PATCH	-	update resource.
PUT	-	update if exist otherwise create resource.
DELETE	-	delete resource.


Idempotence and HTTP-
    An idempotent operation is defined as one which, if performed more than once, results in the same outcome. In a REST API, an idempotent operation is one that even if it were to be ferformed several times, the resulting data on the server would be the same as if it had been performed only once. 

    For each method, the HTTP standard specifies whether it is idempotent or not. GET, PUT and DELETE are idempotent, whereas POST and PATCH are not.

    If we decided that the server will create IDs for every Create operation, the Create operation in our API is NOT idempotent. Since the server will create a new ID (on every Create request), if you call Create twice - even with the same content - you’ll end up with two different objects with the same content, but with different IDs. To summarize: Every Create request will generate a new ID, thus no idempotency.



Returning a list with GET-
    In order to ensure that an API response doesn’t include an astronomically large number of data, we should use pagination functionality along with sorting so that returned data is predictable.

    request URI:
        Get the second page-
            /cashcards?page=1

        …where a page has length of 3
            /cashcards?page=1&size=3

        …sorted by the current Cash Card balance
            /cashcards?page=1&size=3&sort=amount

        …in descending order (highest balance first)
            /cashcards?page=1&size=3&sort=amount,desc




The POST Request and Response-
The Request-
    The POST method allows a Body to be sent to server.
    Method: POST
    URI: /cashcards/
    Body:
        {
            amount: 123.45
        }

The Response-
    On successful creation, We could use 200 OK (the response that Read returns), but there’s a more specific, more accurate code for REST APIs: 201 CREATED.

    The fact that CREATED is the name of the code makes it seem intuitively appropriate, but there’s another, more technical reason to use it: A response code of 200 OK does not answer the question “Was there any change to the server data?”. By returning the 201 CREATED status, the API is specifically communicating that data was added to the data store on the server.

    A Response also contains Headers. Headers have a name and a value. The HTTP standard specifies that the Location header in a 201 CREATED response should contain the URI of the created resource. This is handy because it allows the caller to easily fetch the new resource using the GET endpoint (the one we implemented prior).

    Here is the complete Response:
        Status Code: 201 CREATED
        Header: Location=/cashcards/42


PUT and PATCH-
    both Put and PATCH can be used for updating, but they work in different ways. Essentially, PUT means "create or replace the complete record", whereas PATCH means "update only some fields of the existing record" - in other words, a partial update.

    Why would you want to do a partial update? Partial updates free the client from having to load the entire record and then transmit the entire record back to the server. If the record is large enough, this can have a non-trivial impact on performance.


Surrogate and Natural Keys-
    Natural Key	-	keys which are provided by client to the api for resource creation.
    Surrogate Key	-	keys which are generated by server during resource creation.


POST creates a sub-resource (child resource) under (after), or within the request URI. This is what the Cash Card API does: The client calls the Create endpoint at POST /cashcards, but the actual URI of the created resource contains a generated ID at the end: /cashcards/101

PUT creates or replaces (updates) a resource at a specific request URI. For the /invoice example above, the Create endpoint would be PUT /invoice/1234-567, and the URI of the created resource would be the same as the URI sent in the PUT request.



POST, PUT, PATCH and CRUD Operations - Summary
The sections above can be summarized using the following table:

HTTP    Method  Operation	Definition of Resource URI		What does it do?									                                Response Status Code	Response Body
POST    Create	Server      generates and returns the URI	Creates a sub-resource ("under" or "within" the passed URI)				            201 CREATED		        The created resource
PUT		Create	Client      supplies the URI			    Creates a resource (at the Request URI)							                    201 CREATED		        The created resource
PUT		Update	Client      supplies the URI			    Replaces the resource: The entire record is replaced by the object in the Request	204 NO CONTENT		    (empty)
PATCH	Update	Client      supplies the URI			    Partial Update: modify only fields included in the request on the existing record	200 OK			        The updated resource




DELETE	-
Request:
	Verb	:	DELETE
	URI	:	/cashcards/{id}
	Body	:	(empty)
Response:
Response Code		Use Case
204 NO CONTENT		- The record exists, and
			- The Principal is authorized, and
			- The record was successfully deleted.

404 NOT FOUND		- The record does not exist (a non-existent ID was sent).

404 NOT FOUND		- The record does exist but the Principal is not the owner.


Here, we are returning 404 for "ID does not exist" and "not authorized to access this ID" cases in order to not LEAK any information: if the API return different results for the two cases, then an unauthorized user would be able to discover specific IDs that they're not authorized to access.

Additional Options-
HARD and SOFT DELETE:
A simple option, called HARD DELETE, is to delete the record from the database. With a HARD DELETE, it’s gone forever. So, what can we do if we need data that existed prior to its deletion?

An alternative is SOFT DELETE which works by marking records as "DELETED" in the database (so that they're retained, but marked as DELETED). For example, we can introduce an IS_DELETED boolean or a DELETED_DATE timestamp column and then set that value-instead of fully removing the record by deleting the database row(s). With a SOFT DELETE, we also need to change how Repositories interact with the database. For example, a repository needs to respect the “DELETED” column and exclude records marked deleted from Read requests.


Audit Trail and Archiving:
When working with databases, you’ll find that there’s often a requirement to keep a record of modifications to data records. For example:
	- A customer service representative might need to know when a customer deleted their Cash Card.
	- There may be data retention compliance regulations which require deleted data to be retained for a certain period of time.

If the Cash Card is hard-deleted then we'd need to store additional data to be able to answer this question. Let’s discuss some ways to record historical information:
	- Archive (move) the deleted data into a different location.
	- Add audit fields to the record itself. For example, the DELETED_DATE column that we mentioned already. Additional audit fields can be added, for example DELETED_BY_USER. Again, this isn't limited to Delete operations, but Create and Update also.

APIs which implement soft delete and audit fields can return the state of the object in the response, and the 200 OK status code. So, why did we choose to use 204 instead of 200? Because the 204 NO CONTENT status implies that there's no body in the response.
	- Maintain an audit trail. The audit trail is a record of all important operations done to a record. It can contain not only Delete operations, but Create and Update as well.

The advantage of an audit trail over audit fields is that a trail records all events, whereas audit fields on the record capture only the most recent operation. An audit trail can be stored in a different database location, or even in log files.

It’s worth mentioning that a combination of several of the above strategies is possible. Here are some examples:
	- We could implement soft delete, then have a separate process which hard-deletes or archives soft-deleted records after a certain time period, like once per year.
	- We could implement hard delete, and archive the deleted records.
	- In any of the above cases, we could keep an audit log of which operations happened when.

Finally, observe that even the simple specification that we’ve chosen doesn’t determine whether we implement hard or soft delete. It also doesn’t determine whether we add audit fields or keep an audit trail. However, the fact that we chose to return 204 NO CONTENT implies that soft-delete isn't happening, since if it was, we’d probably choose to return 200 OK with the record in the body.








Simple Security-
    Authentication-
        A user of an API can actually be a person or another program, so often we’ll use the term Principal as a synonym for “user”. Authentication is the act of a Principal proving its identity to the system. One way to do this is to provide credentials (e.g. a username and password using Basic Authentication). We say that once the proper credentials have been presented, the Principal is authenticated, or in other words, the user has successfully logged in.

        HTTP is a stateless protocol, so each request must contain data that proves it’s from an authenticated Principal. Although it’s possible to present the credentials on every request, doing so is inefficient because it requires more processing on the server. Instead, an Authentication Session (or Auth Session, or just Session) is created when a user gets authenticated. Sessions can be implemented in many ways. We’ll use a common mechanism: A Session Token (a string of random characters) that is generated, and placed in a Cookie. A Cookie is a set of data stored in a web client (such as a browser), and associated with a specific URI.

        A couple of nice things about Cookies:

        Cookies are automatically sent to the server with every request (no extra code needs to be written for this to happen). As long as the server checks that the Token in the Cookie is valid, unauthenticated requests can be rejected.
        Cookies can persist for a certain amount of time even if the web page is closed and later re-visited. This ability typically improves the user experience of the web site.


    Authorization-
        Authentication is only the first step. Authorization happens after authentication, and allows different users of the same system to have different permissions.

    Same Origin Policy-
        he web is a dangerous place, where bad actors are constantly trying to exploit security vulnerabilities. The most basic mechanism of protection relies on HTTP clients and servers implementing the Same Origin Policy (SOP). This policy states that only scripts which are contained in a web page are allowed to send requests to the origin (URI) of the web page.

        SOP is critical to the security of web sites because without the policy, anyone could write a web page containing a script which sends requests to any other site. For example, let’s look at a typical banking web site. If a user is logged into their bank account and visits a malicious web page (in a different browser tab or window), the malicious requests could be sent (with the Auth Cookies) to the banking site. This could result in unwanted actions–like a withdrawal from the user’s bank account!

    Cross-Origin Resource Sharing-
        Sometimes a system consists of services running on several machines with different URIs (i.e. Microservices). Cross-Origin Resource Sharing (CORS) is a way that browsers and servers can cooperate to relax the SOP. A server can explicitly allow a list of “allowed origins” of requests coming from an origin outside the server’s.

    Cross-Site Request Forgery-
        One type of vulnerability is a Cross-Site Request Forgery (CSRF) which is often pronounced “Sea-Surf”, and also known as Session Riding. Session Riding is actually enabled by Cookies. CSRF attacks happen when a malicious piece of code sends a request to a server where a user is authenticated. When the server receives the Authentication Cookie, it has no way of knowing if the victim sent the harmful request unintentionally.
        To protect against CSRF attacks, you can use a CSRF Token. A CSRF Token is different from an Auth Token because a unique token is generated on each request. This makes it harder for an outside actor to insert itself into the “conversation” between the client and the server.

    Cross-Site Scripting-
        Perhaps even more dangerous than CSRF vulnerability is Cross-Site Scripting (XSS). This occurs when an attacker is somehow able to “trick” the victim application into executing arbitrary code. There are many ways to do this. A simple example is saving a string in a database containing a <script> tag, and then waiting until the string is rendered on a web page, resulting in the script being executed.

        XSS is potentially more dangerous than CSRF. In CSRF, only actions that a user is authorized to do can be executed. However in XSS, arbitrary malicious code executes on the client or on the server. Additionally, XSS attacks don’t depend on Authentication. Rather, XSS attacks depend on security “holes” caused by poor programming practices.

        The main way to guard against XSS attacks is to properly process all data from external sources (like web forms and URI query strings). In the case of our <script> tag example, attacks can be mitigated by properly escaping the special HTML characters when the string is rendered.

